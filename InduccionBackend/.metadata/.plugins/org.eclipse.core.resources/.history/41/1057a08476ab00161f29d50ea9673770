package co.com.tarjeta.business;

import java.lang.reflect.InvocationTargetException;
import java.util.List;
import java.util.logging.Logger;
import java.util.stream.Collectors;

import javax.ejb.Stateless;
import javax.inject.Inject;

import org.apache.commons.beanutils.BeanUtils;


import co.com.tarjeta.bean.TarjetaBean;
import co.com.tarjeta.dto.TarjetaDTO;
import co.com.tarjeta.entities.Tarjeta;

@Stateless
public class TarjetaBusiness {
	
	@Inject
	private TarjetaBean tarjetaBean;
	
	Logger logger = Logger.getLogger(TarjetaBusiness.class.getName();

	
	public List<TarjetaDTO> getAllCards() {
		List<Tarjeta> lsList = tarjetaBean.buscarTodas();
		return lsList.stream().map(i -> {
				TarjetaDTO tarjetaDTO = new TarjetaDTO();
				try {
					BeanUtils.copyProperties(tarjetaDTO, i);
					tarjetaDTO.setDebt(calculateNewDebt(i.getType(), i.getDebt(), i.getDelayDays()));
				} catch (IllegalAccessException | InvocationTargetException e) {
					LOGGER.info(e);
				}	
				return tarjetaDTO;
			}
		).collect(Collectors.toList());
	}
	
	protected Double calculateNewDebt(String type, Double debt, Integer delayDays) {
		switch(type) {
			case "visa":
			case "american express":
				return debt + (delayDays*2000);
			case "mastercard":
				return debt + (delayDays*1000);
		}
		return debt;
	}

}
